* defhook!
:PROPERTIES:
:ID:       130bc7cf-cfb9-43e0-91ba-2035d4b22012
:END:

** prints messages
:PROPERTIES:
:ID:       62a3fbcd-6182-432e-87bd-9a8a577132b9
:END:

#+begin_src emacs-lisp
#+end_src

** accepts multiple hooks
:PROPERTIES:
:ID:       ef5c4f7d-7a25-41cb-b75f-c1c73e8ec4db
:END:

#+begin_src emacs-lisp
(ert-deftest defhook-accepts-multiple-hooks ()
  (let (a-hook b-hook)
    (defhook! hello-world (a-hook b-hook)
      (+ 1 1))
    (should (-all-p (eq it '(hello-world))
                    (list a-hook b-hook)))))
#+end_src

** accepts arg after docstring
:PROPERTIES:
:ID:       9a758139-cd46-4408-b8ac-66d9ee3f7968
:END:

#+begin_src emacs-lisp
(ert-deftest defhook-accepts-args-after-docstring ()
  (should (macroexpand-1
           '(defhook! hello-world (a-hook)
              :eval-after evil
              :interactive-spec t
              (+ 1 1)))))
#+end_src

** font locking works
:PROPERTIES:
:ID:       29d5d7a4-2e07-4379-9964-b5912ab06ef3
:END:

#+begin_src emacs-lisp
(ert-deftest defhook-font-lock-keywords ()
  (let ((regexp (caar VOID:DEFHOOK-FONT-LOCK-KEYWORDS)))
    (s-match regexp "(defhook! hello-world)")
    ))
#+end_src
