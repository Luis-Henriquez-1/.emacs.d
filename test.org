* defhook!
:PROPERTIES:
:ID:       130bc7cf-cfb9-43e0-91ba-2035d4b22012
:END:

** accepts multiple hooks
:PROPERTIES:
:ID:       ef5c4f7d-7a25-41cb-b75f-c1c73e8ec4db
:END:

#+begin_src emacs-lisp
(ert-deftest defhook-accepts-multiple-hooks ()
  (let (a-hook b-hook)
    (defhook! hello-world (a-hook b-hook)
      (+ 1 1))
    (should (equal a-hook '(a-hook&hello-world)))
    (should (equal b-hook '(b-hook&hello-world)))
    ;; cleanup
    (fmakunbound 'a-hook&hello-world)
    (fmakunbound 'b-hook&hello-world)))
#+end_src

* ivy tests
:PROPERTIES:
:ID:       35fb8af3-c160-4330-8195-b159d97700a0
:END:

** everything checks out
:PROPERTIES:
:ID:       d9402509-d00c-44d4-86aa-de6d8f006594
:END:

#+begin_src emacs-lisp
(ert-deftest ivy-filtering-working-as-expected ()
  ;; make sure `ivy-sort-max-size' is not too low.
  (should (>= 30000 ivy-sort-max-size))
  ;; prescient-save-file
  (should (string= prescient-save-file (concat VOID:DATA-DIR "prescient-save.el")))
  ;; orderless should be doing the filtering.
  (should (null ivy-prescient-enable-filtering))
  ;; ivy prescient can handle the sorting.
  (should ivy-prescient-enable-sorting)
  ;; these should be on.
  (should (and ivy-prescient-mode prescient-persist-mode))
  ;; orderless should be the default sorter.
  (should (eq (alist-get t ivy-re-builders-alist) #'orderless-ivy-re-builder)))
#+end_src

* defadvice
:PROPERTIES:
:ID:       f9dbab12-fa2d-4486-97b0-70b091d6527c
:END:

** advice-p
:PROPERTIES:
:ID:       2ca4de42-5280-45e3-97ee-ab423c3cb1ad
:END:

#+begin_src emacs-lisp
(ert-deftest void:advice-p ()
  (should-not (void:advice-p 'hello))
  (should (void:advice-p 'hello@world)))
#+end_src

** advice-name
:PROPERTIES:
:ID:       2bd281c2-bb9a-4d1b-a926-94854cd1cf9b
:END:

#+begin_src emacs-lisp
(ert-deftest void:advice-name ()
  (should (eq (void:advice-name 'hello 'world) 'hello@world))
  (should (void:advice-p (void:advice-name 'hello 'world))))
#+end_src

** advice-target
:PROPERTIES:
:ID:       e3a21c47-8293-49e1-876f-1dd0f054eec1
:END:

#+begin_src emacs-lisp
(ert-deftest void:advice-target ()
  (should (eq 'hello (void:advice-target 'hello@world))))
#+end_src

** add-advice
:PROPERTIES:
:ID:       ad260c52-0830-499a-8880-f5190ba89788
:END:

#+begin_src emacs-lisp
(ert-deftest void:add-advice ()
  (cl-letf (((symbol-function #'test-fn) (lambda () 1)))
    ;; test function works.
    (should (= 1 (test-fn)))
    (void:add-advice #'test-fn :override #'ignore)
    ;; successfully advised test function.
    (should (null (test-fn)))
    ;; added `test-fn@ignore' as advice.
    (should (advice-member-p #'test-fn@ignore #'test-fn))))
#+end_src

** remove-advice
:PROPERTIES:
:ID:       80f507e8-053f-45a1-8609-ddf5972874f6
:END:

#+begin_src emacs-lisp
(ert-deftest void:remove-advice ()
  (cl-letf (((symbol-function #'test-fn) (lambda () 1)))
    (void:add-advice #'test-fn :override #'ignore)
    (should (advice-member-p #'test-fn@ignore #'test-fn))
    (void:remove-advice #'test-fn #'ignore)
    (should-not (advice-member-p #'test-fn@ignore #'test-fn))))
#+end_src

** expiring advice
:PROPERTIES:
:ID:       7a05e9cd-55d3-4c0d-970b-f2eb60f8a645
:END:

#+begin_src emacs-lisp
(ert-deftest void:expire-advice ()
  (cl-letf (((symbol-function #'test-fn) (lambda () 1))
            ((symbol-function #'test-fn@some-advice) (lambda (&rest _) 0)))
    (should (= 1 (test-fn)))
    (advice-add #'test-fn :override #'test-fn@some-advice)
    ;; `test-fn' was overriden successfully.
    (should (zerop (test-fn)))
    (advice-add #'test-fn@some-advice :around (void:expire-advice #'test-fn@some-advice))
    ;; The expire advice is present.
    (should (advice-member-p #'test-fn@some-advice@expire #'test-fn@some-advice))
    ;; It shouldn't expire immediately.
    (should (zerop (test-fn)))
    ;; ;; Now it should expire.
    (should-not (advice-member-p #'test-fn@some-advice #'test-fn))
    (should (= 1 (test-fn)))
    (should (= 1 (test-fn)))
    ;; The expiring advise should be unbound
    (should-not (boundp #'test-fn@some-advice@expire))
    ;; Works with functions that return t at different times.
    (let ((counter 0))
      (advice-add #'test-fn :override #'test-fn@some-advice)
      (->> (lambda () (= 2 (cl-incf counter)))
           (void:expire-advice #'test-fn@some-advice)
           (advice-add #'test-fn@some-advice :around ))
      (should (zerop (test-fn)))
      (should (zerop (test-fn)))
      (should-not (advice-member-p #'test-fn@some-advice #'test-fn))
      (should (= 1 (test-fn))))))
#+end_src

** does proper thing with around advice
:PROPERTIES:
:ID:       44b4aadc-a579-4b86-bdbc-df965e8d7c89
:END:

#+begin_src emacs-lisp
(ert-deftest around-advice-works ()
  (cl-letf (((symbol-function #'hello-world) (lambda (one two) (* one two))))
    (should (= (hello-world 1 2) 2))
    ;; shouldn't have any advices on it.
    (should-not (advice-mapc (lambda (it _) it) #'hello-world))
    ;; add an around advice.
    (defadvice! do-something-cool (:around hello-world)
      (1+ (apply <orig-fn> <args>)))
    ;; now should have an advice.
    (should (advice-member-p #'hello-world@do-something-cool #'hello-world))
    (should (= (hello-world 1 2) 3))
    ;; remove the advice.
    (advice-remove #'hello-world #'hello-world@do-something-cool)
    (should-not (advice-member-p #'hello-world@do-something-cool #'hello-world))
    ;; should return original value.
    (should (= (hello-world 1 2) 2)))
  (when (fboundp #'hello-world)
    (fmakunbound #'hello-world))
  (when (fboundp #'hello-world@do-something-cool)
    (fmakunbound #'hello-world@do-something-cool)))
#+end_src

** binding works
:PROPERTIES:
:ID:       dc43c155-ae49-463c-9641-60bd15431d97
:END:

#+begin_src emacs-lisp
(ert-deftest other-advices-work ()
  (cl-letf (((symbol-function #'hello-world) (lambda (one two) (* one two))))
    (should (= (hello-world 1 2) 2))
    (defadvice! do-something-cool (:override hello-world)
      (+ <one> <two>))
    (should (advice-member-p #'hello-world@do-something-cool #'hello-world))
    (should (= (hello-world 1 2) 3))
    (advice-remove 'hello-world #'hello-world@do-something-cool)
    (should (= (hello-world 1 2) 2)))
  (when (fboundp #'hello-world)
    (fmakunbound #'hello-world))
  (when (fboundp #'hello-world@do-something-cool)
    (fmakunbound #'hello-world@do-something-cool)))
#+end_src

** can handle multiple advice
:PROPERTIES:
:ID:       1a706063-500e-4a12-8887-c757db215e29
:END:

#+begin_src emacs-lisp
(ert-deftest multiple-advices ()
  (cl-letf (((symbol-function 'faa) (lambda () 1))
            ((symbol-function 'foo) (lambda () 2)))
    (should (= (faa) 1))
    (should (= (foo) 2))
    (defadvice! do-something-cool (:override faa foo)
      0)
    (should (advice-member-p #'faa@do-something-cool #'faa))
    (should (advice-member-p #'foo@do-something-cool #'foo))
    (should (zerop (faa)))
    (should (zerop (foo))))
  (when (fboundp #'foo@do-something-cool)
    (fmakunbound #'foo@do-something-cool))
  (when (fboundp #'faa@do-something-cool)
    (fmakunbound #'faa@do-something-cool)))
#+end_src

* hooks
:PROPERTIES:
:ID:       8b71ed59-bf00-48d2-a070-6e7d62f54770
:END:

** hook-p
:PROPERTIES:
:ID:       656dada6-ffb9-4cbc-8568-13b89b2fed14
:END:

#+begin_src emacs-lisp
(ert-deftest void:hook-p ())
#+end_src

** hook name
:PROPERTIES:
:ID:       fb4eaaf3-365d-4248-b95e-dc001c95d70b
:END:

#+begin_src emacs-lisp
(ert-deftest void:hook-name ()
  (alet (void:hook-name 'emacs-lisp-mode-hook 'do-something)
    (should (eq it 'emacs-lisp-mode-hook&do-something))))
#+end_src

** hook variable
:PROPERTIES:
:ID:       3d71878b-ceee-43b9-8a23-e31820418886
:END:

#+begin_src emacs-lisp
(ert-deftest void:hook-var ()
  (alet (void:hook-var 'emacs-lisp-mode-hook&do-something)
    (should (eq it 'emacs-lisp-mode-hook))))
#+end_src

* defpackage
:PROPERTIES:
:ID:       83ea9898-ec4f-4783-9edd-e84296d43d8c
:END:

** aliases
:PROPERTIES:
:ID:       1f7369f7-514f-4bdd-83a3-8a2329c37966
:END:

*** setting an alias
:PROPERTIES:
:ID:       d2ef7a1d-56f6-431a-8eb0-3f6d1438ba32
:END:

#+begin_src emacs-lisp
(ert-deftest def-package-set-weight ()
  (let ((def-package-weight-alist '((:foo 10))))
    (def-package-set-weight :foo 15)
    (should (= (alist-get :foo def-package-weight-alist) 15))))
#+end_src

** weights
:PROPERTIES:
:ID:       596afc57-5aed-4ea3-9e6c-1605d472ca46
:END:

*** properly set weights
:PROPERTIES:
:ID:       4787c210-8e0f-4300-a648-b56edff1c411
:END:

#+begin_src emacs-lisp
(ert-deftest def-package-set-weight ()
  (let ((def-package-weight-alist '((:foo 10))))
    (def-package-set-weight :foo 15)
    (should (= (alist-get :foo def-package-weight-alist) 15))))
#+end_src

*** keys are sorted properly based on weights
:PROPERTIES:
:ID:       240ea8bd-13e6-498c-a37b-4277a563b91b
:END:

** generating the result form
:PROPERTIES:
:ID:       46561f94-4e52-4cdd-9788-a5e9d18780ef
:END:

*** apply function
:PROPERTIES:
:ID:       f4456a47-f88c-426b-a095-b1173224021d
:END:

#+begin_src emacs-lisp
(ert-deftest def-package-apply-fn ()
  (cl-letf* (((symbol-function 'apply-setq)
              (lambda (it &rest _) `(setq ,(car it) ,(cdr it))))
             (def-package-keywords (a-list :setq #'apply-setq)))
    ;; sanity check.
    (should (equal '(setq var 3) (apply-setq (cons 'var 3))))
    (should (equal '((setq var 3)) (def-package-apply-fn (list :setq (cons 'var 3)))))))
#+end_src

** custom keywords
:PROPERTIES:
:ID:       a508a0ca-3cfa-4719-bf72-4f359358d4e6
:END:

*** dp setq
:PROPERTIES:
:ID:       dedd1dca-5caf-47ad-87e3-d43bcce02fa4
:END:

#+begin_src emacs-lisp
(ert-deftest def-package-apply-setq ()
  (alet (def-package-apply-setq 'hello (cons 'a 3) nil)
    (should (equal it '((setq a 3))))))
#+end_src

*** dp forms
:PROPERTIES:
:ID:       23f2f158-75b3-47fe-9b45-c935be505fc4
:END:

#+begin_src emacs-lisp
(ert-deftest def-package-forms ()
  (let ((def-package-keywords (a-list :setq #'def-package-apply-setq))
        (alist (a-list :setq '(a . 3)))
        (package 'hello))
    (should (alist-get :setq alist))
    (should (equal (def-package-apply-fn package nil (-first-item alist)) '((setq a 3))))
    ;; (-reduce-from (-partial #'def-package-apply-fn package) nil alist)
    (should (equal (def-package-forms 'hello alist) '((setq a 3))))))
#+end_src

*** dp normalize
:PROPERTIES:
:ID:       d5f65879-d76f-40f5-930d-de8ca7469e84
:END:

#+begin_src emacs-lisp
(ert-deftest def-package-normalize ()
  (alet (def-package-normalize '(:foo a b c :fee b c :fii (hello)))
    (should (eq it (a-list :foo 'a :foo 'b :foo 'c :fee 'b :fee 'c))))

  (alet (def-package-normalize '(:init (+ 1 1) (+ 2 2)))
    (should (eq it (alist :init '(+ 1 1) :init '(+ 2 2))))))
#+end_src

*** dp true-key
:PROPERTIES:
:ID:       8644ea28-5314-4c57-95a4-f19e3393f66b
:END:

#+begin_src emacs-lisp
(ert-deftest def-package-true-key ()
  (let ((def-package-alias-alist '((:ensure . :ho) (:ho . :laa) (:laa . :hee))))
    ;; return the real aliased key.
    (should (eq (def-package-true-key :ensure) :hee))
    ;; return the original key when non aliases.
    (should (eq (def-package-true-key :when) :when))))
#+end_src

** defpackage!
:PROPERTIES:
:ID:       5dbfb3a9-b671-4a90-9def-7b8267c05b07
:END:

#+begin_src emacs-lisp
(ert-deftest def-package-forms ()
  (alet (def-package-forms 'horse (dp~normalize '(:os mac :require t)))
    (should (equal it '((with-os! mac (require 'horse))))))
  (alet (def-package-forms 'cow (dp~normalize ))))
#+end_src
