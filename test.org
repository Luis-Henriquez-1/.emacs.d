* hook name
:PROPERTIES:
:ID:       a906f76d-e682-417e-9f28-80cd67fa2f7f
:END:

#+begin_src emacs-lisp
(ert-deftest void:test-hook-name ()
  (let* ((target 'after-something-hook)
         (hook 'my-hook-fn)
         (hook-name (symbol-name (void:hook-name target hook))))
    (should (string= hook-name (void:symbol-intern )))))
#+end_src

* advice name
:PROPERTIES:
:ID:       b9acfae3-d442-494a-a8fa-5ff774474831
:END:

#+begin_src emacs-lisp
(ert-deftest void:test-advice-name ()
  (let* (())
    (should (string= () "")))
  )
#+end_src

* advice-p
:PROPERTIES:
:ID:       a0106e0f-ed02-452f-9919-5ffd7f28fb00
:END:

#+begin_src emacs-lisp
(ert-deftest test:advice-p ()
  (should (eq t (advice-p))))
#+end_src

* hook-p
:PROPERTIES:
:ID:       95478c49-ef81-4ac5-a3c4-14541fbccb2a
:END:

#+begin_src emacs-lisp
(ert-deftest )
#+end_src

* adding hook
:PROPERTIES:
:ID:       0d23a888-be8d-4b8f-9f53-696b86a3136f
:END:

#+begin_src emacs-lisp
(ert-deftest void:add-hook ()
  (let ((some-hook))
    (void:add-hook 'some-hook #'hello:world)))
#+end_src

* adding advice
:PROPERTIES:
:ID:       2cecb4e0-fd73-443b-9f61-86b2a0231be6
:END:

#+begin_src emacs-lisp
(ert-deftest adding-advice ()
  )
#+end_src

* add-expiring-advice
:PROPERTIES:
:ID:       94adbd35-dc96-4476-a26b-dae44d02ffe8
:END:

#+begin_src emacs-lisp
(ert-deftest add-expiring-advice ()
  (let ((hook)
        (advice))
    (void:add-expiring-advice fn)
    (run-hooks 'my-test-hook)
    (should )))
#+end_src
