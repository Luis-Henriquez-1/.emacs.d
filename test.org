* hook name
:PROPERTIES:
:ID:       a906f76d-e682-417e-9f28-80cd67fa2f7f
:END:

#+begin_src emacs-lisp
(ert-deftest void:hook-name ()
  (let* ((target 'some-hook)
         (hook 'void:do-something-hook)
         (hook-name (symbol-name (void:hook-name target hook))))
    (should (string= hook-name "some-hook%do-something"))))
#+end_src

* hook target
:PROPERTIES:
:ID:       012a7347-4c97-47e6-9679-69b2b4547736
:END:

#+begin_src emacs-lisp
(ert-deftest void:hook-target ()
  (let ((hook 'emacs-startup-hook%do-something-hook))
    (should (eq (void:hook-target hook) 'emacs-startup-hook))))
#+end_src

* hook-p
:PROPERTIES:
:ID:       95478c49-ef81-4ac5-a3c4-14541fbccb2a
:END:

#+begin_src emacs-lisp
(ert-deftest void:hook-p ()
  )
#+end_src

* add-hook
:PROPERTIES:
:ID:       0d23a888-be8d-4b8f-9f53-696b86a3136f
:END:

#+begin_src emacs-lisp
(ert-deftest void:add-hook ()
  (let ((a-hook)
        (b-hook)
        (c-hook)
        (targets '(a-hook b-hook c-hook)))
    ;; should be able to hooks to multiple targets.
    (void:add-hook targets #'hello-world)
    (should (-all-p ) targets)
    ;; should be able to hooks to multiple targets.
    (void:add-hook b-hook (list #'hello-world #'hello-sam))
    (should (-all-p (-contains-p b-hook )) targets)
    ;; should be able to hooks to multiple targets.
    ;; should be able to create a transient
    (should)
    (void:add-hook 'some-hook #'hello:world)))
#+end_src

* defhook!
:PROPERTIES:
:ID:       8bbc7916-eaf8-47bb-8ce6-c7eacfd0d8c9
:END:

#+begin_src emacs-lisp
(ert-deftest defhook! ()
  )
#+end_src

* advice name
:PROPERTIES:
:ID:       b9acfae3-d442-494a-a8fa-5ff774474831
:END:

#+begin_src emacs-lisp
(ert-deftest void:advice-name ()
  (let* ((advice 'recentf-mode@silence-output))
    (should (string= (void:advice-name) ""))))
#+end_src

* advice target
:PROPERTIES:
:ID:       b8aa9227-8d57-46e8-a6ca-e94725caba1f
:END:

#+begin_src emacs-lisp
(ert-deftest void:advice-target ()
  (let* ((advice 'recentf-mode@silence-output))
    (should (string= (void:advice-name) ""))))
#+end_src

* advice-p
:PROPERTIES:
:ID:       a0106e0f-ed02-452f-9919-5ffd7f28fb00
:END:

#+begin_src emacs-lisp
(ert-deftest void:advice-p ()
  (should (eq t (advice-p))))
#+end_src

* adding advice
:PROPERTIES:
:ID:       2cecb4e0-fd73-443b-9f61-86b2a0231be6
:END:

#+begin_src emacs-lisp
(ert-deftest void:add-advice ()
  (let ((some-hook))
    ;; can add advice normally
    (void:add-hook 'some-hook #'hello:world)
    ;; can accept multiple targets
    (void:add-hook '(one-hook two-hook) #'hello:world)
    ;; can accept multiple hooks
    (void:add-hook '(one-hook two-hook) #'hello:world)
    ;; can accept multiple of both
    (void:add-hook '(one-target two-target) '(hi ho um))
    ;; expiration works.
    (void:add-hook)
    ))
#+end_src

* add-expiring-advice
:PROPERTIES:
:ID:       94adbd35-dc96-4476-a26b-dae44d02ffe8
:END:

#+begin_src emacs-lisp
(ert-deftest void:add-expiring-advice ()
  (let ((some-hook nil)
        (advice-target))
    (void:add-hook 'some-hook #'some-fn)
    (void:add-expiring-advice fn)
    (run-hooks 'my-test-hook)
    (should (null some-hook))
    (should (not (boundp #'some-fn)))
    (void:expiring-advice 'a-target (lambda () t))
    (funcall #'a-target)
    (should ())
    (void:add-advice 'a-target :after #'some-fn nil (lambda () t))
    (should ())))
#+end_src

* defadvice!
:PROPERTIES:
:ID:       69caddec-2220-4910-80e7-9179b4b1a3ec
:END:

#+begin_src emacs-lisp
(ert-deftest defadvice! ()
  )
#+end_src

