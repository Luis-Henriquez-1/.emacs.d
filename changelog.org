* Version 0.1
:PROPERTIES:
:ID:       8fd5fdb0-d8e1-4f7e-a6db-4d033a05371d
:END:

** hooks now follow a naming convention
:PROPERTIES:
:ID:       dbe3f98a-0cec-4d12-b0f5-9745330a350d
:END:

All user defined hooks now have the format =hook-variable-name&action-to-be-done=.
If we wanted, for example, to restore the gc-cons-threshold after
=emacs-startup-hook=. The a hook would look like
=emacs-startup-hook&increase-garbage-collection=.

** add improvements to defhook!
:PROPERTIES:
:ID:       cc995576-2322-45cd-82ed-4b083f94d618
:END:

The purpose of this change is to extend and improve the functionality of
=defhook!= macro. Specifically, I introduce a consistent naming scheme for
user-designed hooks (incidentally with very concise syntax), a logging system
that facilitates , and a rich set of keywords that increase the expressiveness
of declaring hooks.

To add this functionality I scrapped the =defhook!= macro I wrote in favor of the
[[https://github.com/neil-smithline-elisp/defhook][defhook package]]. This package was created in 2012.

**** improve syntax
:PROPERTIES:
:ID:       78554953-f62b-43ea-aade-a57eacb99655
:END:

***** typical syntax
:PROPERTIES:
:ID:       0d0c2108-8c15-44bb-a7c1-7fba27037543
:END:

=defhook!= now takes in the the hook variable in it's argument list.
Additionlly, it can use keywords as specified in [[helpfn:defhook][defhook]] in
its argument list as well.

#+begin_src emacs-lisp
(defhook! do-something (some-hook :eval-after simple)
  "Hello world."
  (+ 1 1))
#+end_src

***** add the ability to specify keyword arguments below
:PROPERTIES:
:ID:       4a7e8e71-745a-4937-9611-86f72b9fa9b6
:END:

The syntax of hooks.

#+begin_src emacs-lisp
(defhook! boost-garbage-collection (emacs-startup-hook)
  "Increase the frequency of garbage collection."
  :eval-after simple
  :append t
  (setq gc-cons-threshold most-positive-fixnum))
#+end_src

***** add ability to have multiple hooks
:PROPERTIES:
:ID:       f0a7f0e5-b9b8-4a21-bf3e-90b903fce2c3
:END:

#+begin_src emacs-lisp
(defhook! say-lalala (emacs-startup-hook emacs-lisp-mode-hook)
  "Say \"lalala\"."
  (message "lalala"))
#+end_src

**** creates hook names that meets naming conventions
:PROPERTIES:
:ID:       a43264d4-f30a-4411-9443-4bdda08d4290
:END:

The name of the advice(s) defined by defhook is determined by the specified name.

**** debugging/documenting capabilities
:PROPERTIES:
:ID:       b4130374-2b99-475b-b369-831a53a9b2c6
:END:

If debug-p is non-nil, adding a hook via =defhook!= will produce output of what
hook was added where. Futhermore, when the hook is run it will also produce output.
The =defhook= package provides =defhook-executed= and =defhook-done=.

**** update emacs-lisp-mode font lock
:PROPERTIES:
:ID:       4a524bb5-f474-4a60-b06b-9954c099d545
:END:

The syntax of =defhook!= is designed to be similar to that of =defun=.
Therefore, it makes sense to add font lock that allows =defhook= to be
highlighted well.

** don't scale headlines in one-themes
:PROPERTIES:
:ID:       6a0c947c-660a-439f-aa14-4b103d8b7548
:END:

I prefer headlines to be a consistent height to other text. It is less visually
distracting.

** autosaving
:PROPERTIES:
:ID:       05722dc4-91d7-47e1-8ad2-3233ba06a442
:END:

The idea minimize the
