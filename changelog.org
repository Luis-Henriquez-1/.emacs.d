* add a hook and advice naming system
:PROPERTIES:
:ID:       6afe717c-8dbb-4ca1-b72d-9a0c7a3ac490
:END:

*** consistent naming scheme
:PROPERTIES:
:ID:       7212d4d3-9ad5-42b2-8ddc-9028d79327e8
:END:

The primary purpose of this change is to provide Void with a consistent naming
scheme for hook, and one for advices. Specifically, hooks. As a consequence of
this naming scheme, each advice I define advises exactly one function. Moreover,
having advise named in such a way makes getting the TARGET of an advice or hook
easy because the name of the target is a substring of the hook name.

The way an advice works when it is defined.

*** expiration
:PROPERTIES:
:ID:       434e982c-7262-4739-a28d-10ab2047aa49
:END:

Also notable, this change added a system for adding advises and hooks that
expire. Specifically, the functions for adding hooks and advices [[][]] and
[[][]] provide an argument, =expire-fn=. This argument requires a function. This
function is called when the advice is called and when it returns true, the
advise is removed from its target and unbound.

This expiration functionality is useful in situations such as boostrapping
packages at startup. For example, exwm when initialized at startup, adds a good
amount of startup time to emacs. Therefore, I.

*** interactive adding/removing advice
:PROPERTIES:
:ID:       7c76c1ee-4cdf-4800-844b-bde97d992ad9
:END:

I've had cases when I broke a function I would have a hard time removing the
advice. If I remember correctly this is because I didn't know.

*** noteworthy properties
:PROPERTIES:
:ID:       9dcdd663-b9f5-4347-9698-a94792418706
:END:

**** each advice has one and only one target
:PROPERTIES:
:ID:       c1300559-6559-4b7d-80b0-179b8f63ff1e
:END:

**** the target of the advice can be derived from the advice name
:PROPERTIES:
:ID:       595e7d0f-d8cc-4e0a-96ce-a066ff4cf0c7
:END:
